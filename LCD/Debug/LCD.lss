
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2d  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034f  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8e:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_command>:
#define D6 PD4
#define D7 PD5

void LCD_command(unsigned char cmnd) {
	// Отправляем старшие 4 бита
	PORTD = (PORTD & 0x0F) | (cmnd & 0xF0);
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~ (1<<RS); // RS=0 для команды
  a2:	9b b1       	in	r25, 0x0b	; 11
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<E); // E=1 для начала
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	00 00       	nop
	_delay_us(1);
	PORTD &= ~ (1<<E);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9d 7f       	andi	r25, 0xFD	; 253
  b4:	9b b9       	out	0x0b, r25	; 11
  b6:	32 e4       	ldi	r19, 0x42	; 66
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_command+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_command+0x28>

	_delay_us(200);

	// Отправляем младшие 4 бита
	PORTD = (PORTD & 0x0F) | (cmnd << 4);
  be:	2b b1       	in	r18, 0x0b	; 11
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	83 9f       	mul	r24, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	92 2f       	mov	r25, r18
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<E);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	00 00       	nop
	_delay_us(1);
	PORTD &= ~ (1<<E);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 ef       	ldi	r24, 0xF3	; 243
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_command+0x4c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_command+0x52>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <LCD_data>:
	_delay_ms(2);
}

void LCD_data(unsigned char data) {
	// Отправляем старшие 4 бита
	PORTD = (PORTD & 0x0F) | (data & 0xF0);
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	28 2f       	mov	r18, r24
  f2:	20 7f       	andi	r18, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<RS); // RS=1 для данных
  f8:	9b b1       	in	r25, 0x0b	; 11
  fa:	91 60       	ori	r25, 0x01	; 1
  fc:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<E);
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	92 60       	ori	r25, 0x02	; 2
 102:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	00 00       	nop
	_delay_us(1);
	PORTD &= ~ (1<<E);
 106:	9b b1       	in	r25, 0x0b	; 11
 108:	9d 7f       	andi	r25, 0xFD	; 253
 10a:	9b b9       	out	0x0b, r25	; 11
 10c:	32 e4       	ldi	r19, 0x42	; 66
 10e:	3a 95       	dec	r19
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_data+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_data+0x28>

	_delay_us(200);

	// Отправляем младшие 4 бита
	PORTD = (PORTD & 0x0F) | (data << 4);
 114:	2b b1       	in	r18, 0x0b	; 11
 116:	30 e1       	ldi	r19, 0x10	; 16
 118:	83 9f       	mul	r24, r19
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	92 2f       	mov	r25, r18
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	89 2b       	or	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<E);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	00 00       	nop
	_delay_us(1);
	PORTD &= ~ (1<<E);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_data+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_data+0x52>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_init>:

	_delay_ms(2);
}

void LCD_init(void) {
	DDRD = 0xFF; // Устанавливаем PORTD как выход
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a b9       	out	0x0a, r24	; 10
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	93 e1       	ldi	r25, 0x13	; 19
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_init+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_init+0xe>
 150:	00 00       	nop

	_delay_ms(20);

	// Инициализация в 4-битном режиме
	LCD_command(0x02); // Инициализация дисплея
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
	LCD_command(0x28); // 2 строки, 5x7 матрица в 4-битном режиме
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
	LCD_command(0x0C); // Включить дисплей, курсор отключен
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
	LCD_command(0x06); // Автоинкремент курсора
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
	LCD_command(0x01); // Очистить дисплей
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_init+0x32>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_init+0x38>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <LCD_string>:
	_delay_ms(2);
}

void LCD_string(char *str) {
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	int i;
	for(i = 0; str[i] != 0; i++) {
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	03 c0       	rjmp	.+6      	; 0x194 <LCD_string+0x16>
		LCD_data(str[i]);
 18e:	0e 94 76 00 	call	0xec	; 0xec <LCD_data>
	_delay_ms(2);
}

void LCD_string(char *str) {
	int i;
	for(i = 0; str[i] != 0; i++) {
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	f8 01       	movw	r30, r16
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	f7 cf       	rjmp	.-18     	; 0x18e <LCD_string+0x10>
		LCD_data(str[i]);
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <main>:

int main(void) {
	LCD_init(); // Инициализация LCD
 1aa:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_init>

	while(1) {
		LCD_command(0x80); // Начало первой строки
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
		LCD_string("Hello, World!");
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x18>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x22>
 1cc:	00 00       	nop
		_delay_ms(1000);
		
		LCD_command(0xC0); // Начало второй строки
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_command>
		LCD_string("ATmega328P");
 1d4:	8e e0       	ldi	r24, 0x0E	; 14
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
 1dc:	2f e3       	ldi	r18, 0x3F	; 63
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x38>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x42>
 1ec:	00 00       	nop
 1ee:	df cf       	rjmp	.-66     	; 0x1ae <main+0x4>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
